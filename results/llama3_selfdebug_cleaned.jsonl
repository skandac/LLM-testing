{"task_id": "HumanEval/0", "prompt": "Write a Python function `add(a: int, b: int) -> int` that returns the sum of two integers.\n# Step 1: Write a draft solution.\n# Step 2: Check it against test cases, including edge cases, and fix any mistakes.\n# Step 3: Return the final corrected function.\n", "completion": "Let's check this function with some test cases."}
{"task_id": "HumanEval/5", "prompt": "Write a Python function `string_xor(a: str, b: str) -> str` that performs XOR on two equal-length binary strings and returns the resulting binary string.\n# Step 1: Write a draft solution.\n# Step 2: Check it against test cases, including edge cases, and fix any mistakes.\n# Step 3: Return the final corrected function.\n", "completion": "This function first checks if the two input strings are of equal length. If not, it raises a ValueError. Then, it iterates over each character in the strings, performs XOR operation on corresponding bits, and appends the result to the output string.\n\nLet's test this function with some test cases:"}
{"task_id": "HumanEval/12", "prompt": "Write a Python function `is_palindrome(s: str) -> bool` that returns True if the input string is a palindrome (case-insensitive).\n# Step 1: Write a draft solution.\n# Step 2: Check it against test cases, including edge cases, and fix any mistakes.\n# Step 3: Return the final corrected function.\n", "completion": "def is_palindrome(s: str) -> bool:\n    return s.lower() == s.lower()[::-1]"}
{"task_id": "HumanEval/19", "prompt": "Write a Python function `truncate_number(x: float) -> int` that removes the fractional part of a number.\n# Step 1: Write a draft solution.\n# Step 2: Check it against test cases, including edge cases, and fix any mistakes.\n# Step 3: Return the final corrected function.\n", "completion": "import math\n\ndef truncate_number(x: float) -> int:\n    return math.floor(x)"}
{"task_id": "HumanEval/23", "prompt": "Write a Python function `filter_by_substring(words: list[str], substr: str) -> list[str]` that returns a list of words containing the given substring.\n# Step 1: Write a draft solution.\n# Step 2: Check it against test cases, including edge cases, and fix any mistakes.\n# Step 3: Return the final corrected function.\n", "completion": "Let's check this against some test cases to ensure it works correctly."}
{"task_id": "HumanEval/30", "prompt": "Write a Python function `parse_music(notes: str) -> list[int]` that converts a string of music notes with durations to a list of integers representing durations in milliseconds.\n# Step 1: Write a draft solution.\n# Step 2: Check it against test cases, including edge cases, and fix any mistakes.\n# Step 3: Return the final corrected function.\n", "completion": "**Step 2: Check it against test cases, including edge cases**\n\nLet's create some test cases:"}
{"task_id": "HumanEval/45", "prompt": "Write a Python function `mean_absolute_deviation(lst: list[float]) -> float` that returns the mean absolute deviation from the mean of a list.\n# Step 1: Write a draft solution.\n# Step 2: Check it against test cases, including edge cases, and fix any mistakes.\n# Step 3: Return the final corrected function.\n", "completion": "def mean_absolute_deviation(lst: list[float]) -> float:\n    mean = sum(lst) / len(lst)\n    deviations = [abs(x - mean) for x in lst]\n    return sum(deviations) / len(deviations)"}
{"task_id": "HumanEval/55", "prompt": "Write a Python function `unique_digits(n: int) -> bool` that returns True if all digits of a number are unique.\n# Step 1: Write a draft solution.\n# Step 2: Check it against test cases, including edge cases, and fix any mistakes.\n# Step 3: Return the final corrected function.\n", "completion": "def unique_digits(n: int) -> bool:\n    return len(str(n)) == len(set(str(n)))"}
{"task_id": "HumanEval/60", "prompt": "Write a Python function `is_monotonic(lst: list[int]) -> bool` that returns True if the list is monotonic (non-increasing or non-decreasing).\n# Step 1: Write a draft solution.\n# Step 2: Check it against test cases, including edge cases, and fix any mistakes.\n# Step 3: Return the final corrected function.\n", "completion": "def is_monotonic(lst: list[int]) -> bool:\n    if len(lst) <= 1:\n        return True  # trivially monotonic for lists with 0 or 1 elements\n    \n    ascending = all(x <= y for x, y in zip(lst, lst[1:]))\n    descending = all(x >= y for x, y in zip(lst, lst[1:]))\n    \n    return ascending or descending"}
{"task_id": "HumanEval/100", "prompt": "Write a Python function `fib(n: int) -> int` that returns the nth Fibonacci number (0-indexed).\n# Step 1: Write a draft solution.\n# Step 2: Check it against test cases, including edge cases, and fix any mistakes.\n# Step 3: Return the final corrected function.\n", "completion": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a+b\n        return b"}
