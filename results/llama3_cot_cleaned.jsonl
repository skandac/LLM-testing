{"task_id": "HumanEval/0", "prompt": "Write a Python function `add(a: int, b: int) -> int` that returns the sum of two integers.\n\n# Let's think step by step and then write a correct Python function.\n", "completion": "def add(a: int, b: int) -> int:\n    return a + b"}
{"task_id": "HumanEval/5", "prompt": "Write a Python function `string_xor(a: str, b: str) -> str` that performs XOR on two equal-length binary strings and returns the resulting binary string.\n\n# Let's think step by step and then write a correct Python function.\n", "completion": "This function first checks if both input strings are of the same length. If not, it raises a ValueError. Then it initializes an empty string `result` to store the resulting binary string. It then iterates over each pair of characters from both strings using the `zip` function.\n\nFor each pair of characters, it converts them to integers (0 or 1), performs the XOR operation using the `^` operator, and adds the result as a character to the `result` string. Finally, it returns the resulting binary string."}
{"task_id": "HumanEval/12", "prompt": "Write a Python function `is_palindrome(s: str) -> bool` that returns True if the input string is a palindrome (case-insensitive).\n\n# Let's think step by step and then write a correct Python function.\n", "completion": "This function uses Python's slice notation `s[::-1]` to create a reversed copy of the input string. It then compares this reversed copy with the original string using the equality operator. If they are equal, it returns `True`, indicating that the input string is a palindrome. Otherwise, it returns `False`."}
{"task_id": "HumanEval/19", "prompt": "Write a Python function `truncate_number(x: float) -> int` that removes the fractional part of a number.\n\n# Let's think step by step and then write a correct Python function.\n", "completion": "def truncate_number(x: float) -> int:\n    return int(x)"}
{"task_id": "HumanEval/23", "prompt": "Write a Python function `filter_by_substring(words: list[str], substr: str) -> list[str]` that returns a list of words containing the given substring.\n\n# Let's think step by step and then write a correct Python function.\n", "completion": "def filter_by_substring(words: list[str], substr: str) -> list[str]:\n    \"\"\"\n    Returns a list of words containing the given substring.\n\n    Args:\n        words (list[str]): The input list of words.\n        substr (str): The substring to search for.\n\n    Returns:\n        list[str]: A list of words that contain the given substring.\n    \"\"\"\n    result = []\n    for word in words:\n        if substr in word:  # Check if the substring is present in the word\n            result.append(word)  # If it is, add the word to the result list\n    return result"}
{"task_id": "HumanEval/30", "prompt": "Write a Python function `parse_music(notes: str) -> list[int]` that converts a string of music notes with durations to a list of integers representing durations in milliseconds.\n\n# Let's think step by step and then write a correct Python function.\n", "completion": "This function takes a string of music notes with durations as input, splits it into individual notes and durations, extracts the note type and duration from each note string, calculates the actual duration in milliseconds using the note type and the duration value, and returns a list of integers representing the durations in milliseconds."}
{"task_id": "HumanEval/45", "prompt": "Write a Python function `mean_absolute_deviation(lst: list[float]) -> float` that returns the mean absolute deviation from the mean of a list.\n\n# Let's think step by step and then write a correct Python function.\n", "completion": "def mean_absolute_deviation(lst: list[float]) -> float:\n    mean = sum(lst) / len(lst)\n    deviations = [abs(x - mean) for x in lst]\n    return sum(deviations) / len(deviations)"}
{"task_id": "HumanEval/55", "prompt": "Write a Python function `unique_digits(n: int) -> bool` that returns True if all digits of a number are unique.\n\n# Let's think step by step and then write a correct Python function.\n", "completion": "def unique_digits(n: int) -> bool:\n    \"\"\"\n    Returns True if all digits of `n` are unique.\n    \"\"\"\n    return len(set(str(n))) == len(str(n))"}
{"task_id": "HumanEval/60", "prompt": "Write a Python function `is_monotonic(lst: list[int]) -> bool` that returns True if the list is monotonic (non-increasing or non-decreasing).\n\n# Let's think step by step and then write a correct Python function.\n", "completion": "This function first checks if the list has less than two elements. In that case, it returns True because a list with one or zero elements is always considered monotonic.\n\nThen it initializes a flag `increasing` to track whether we've seen an increasing or decreasing trend in the list. If the list has more than one element, it iterates over the list, comparing each pair of adjacent elements.\n\nIf it finds an element that's smaller than the previous one and we haven't seen any decreasing trend so far, or if we're expecting to see an increasing trend but instead see a decrease, or if we're expecting to see a decrease but instead see an increase, it returns False. If it doesn't find any of these, it continues iterating.\n\nIf it reaches the end of the list without returning False, it means that all elements in the list are either always increasing or always decreasing, so it returns True."}
{"task_id": "HumanEval/100", "prompt": "Write a Python function `fib(n: int) -> int` that returns the nth Fibonacci number (0-indexed).\n\n# Let's think step by step and then write a correct Python function.\n", "completion": "However, this function has an exponential time complexity because it does a lot of repeated computation. This is not efficient for large values of `n`.\n\nA more efficient approach would be to use dynamic programming and store the Fibonacci numbers as they are calculated:"}
