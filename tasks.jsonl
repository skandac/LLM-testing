{"task_id": "HumanEval/0", "prompt": "Write a Python function `add(a: int, b: int) -> int` that returns the sum of two integers.", "canonical_solution": "def add(a: int, b: int) -> int:\n    return a + b", "test": "assert add(2, 3) == 5\nassert add(-1, 5) == 4\nassert add(0, 0) == 0\nassert add(-100, -200) == -300"}
{"task_id": "HumanEval/5", "prompt": "Write a Python function `string_xor(a: str, b: str) -> str` that performs XOR on two equal-length binary strings and returns the resulting binary string.", "canonical_solution": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x)^int(y)) for x, y in zip(a,b))", "test": "assert string_xor('1010','0101')=='1111'\nassert string_xor('1111','0000')=='1111'\nassert string_xor('','')==''\nassert string_xor('0','0')=='0'"}
{"task_id": "HumanEval/12", "prompt": "Write a Python function `is_palindrome(s: str) -> bool` that returns True if the input string is a palindrome (case-insensitive).", "canonical_solution": "def is_palindrome(s: str) -> bool:\n    s = s.lower()\n    return s == s[::-1]", "test": "assert is_palindrome('racecar') is True\nassert is_palindrome('hello') is False\nassert is_palindrome('') is True\nassert is_palindrome('a') is True\nassert is_palindrome('Aa') is True"}
{"task_id": "HumanEval/19", "prompt": "Write a Python function `truncate_number(x: float) -> int` that removes the fractional part of a number.", "canonical_solution": "def truncate_number(x: float) -> int:\n    return int(x)", "test": "assert truncate_number(3.14)==3\nassert truncate_number(-2.99)==-2\nassert truncate_number(0.0)==0\nassert truncate_number(5.0)==5"}
{"task_id": "HumanEval/23", "prompt": "Write a Python function `filter_by_substring(words: list[str], substr: str) -> list[str]` that returns a list of words containing the given substring.", "canonical_solution": "def filter_by_substring(words: list[str], substr: str) -> list[str]:\n    return [w for w in words if substr in w]", "test": "assert filter_by_substring(['apple','banana','apricot'],'ap')==['apple','apricot']\nassert filter_by_substring([], 'a')==[]\nassert filter_by_substring(['abc'], '')==['abc']"}
{"task_id": "HumanEval/30", "prompt": "Write a Python function `parse_music(notes: str) -> list[int]` that converts a string of music notes with durations to a list of integers representing durations in milliseconds.", "canonical_solution": "def parse_music(notes: str) -> list[int]:\n    if not notes: return []\n    return [int(n.split(':')[1]) for n in notes.split()]", "test": "assert parse_music('C4:500 D4:250')==[500,250]\nassert parse_music('')==[]\nassert parse_music('E4:0')==[0]"}
{"task_id": "HumanEval/45", "prompt": "Write a Python function `mean_absolute_deviation(lst: list[float]) -> float` that returns the mean absolute deviation from the mean of a list.", "canonical_solution": "def mean_absolute_deviation(lst: list[float]) -> float:\n    if not lst: return 0\n    mean = sum(lst)/len(lst)\n    return sum(abs(x-mean) for x in lst)/len(lst)", "test": "assert mean_absolute_deviation([1,2,3,4])==1.0\nassert mean_absolute_deviation([5])==0\nassert mean_absolute_deviation([])==0"}
{"task_id": "HumanEval/55", "prompt": "Write a Python function `unique_digits(n: int) -> bool` that returns True if all digits of a number are unique.", "canonical_solution": "def unique_digits(n: int) -> bool:\n    s=str(n)\n    return len(set(s))==len(s)", "test": "assert unique_digits(123) is True\nassert unique_digits(112) is False\nassert unique_digits(0) is True\nassert unique_digits(9876543210) is True"}
{"task_id": "HumanEval/60", "prompt": "Write a Python function `is_monotonic(lst: list[int]) -> bool` that returns True if the list is monotonic (non-increasing or non-decreasing).", "canonical_solution": "def is_monotonic(lst: list[int]) -> bool:\n    return all(lst[i]<=lst[i+1] for i in range(len(lst)-1)) or all(lst[i]>=lst[i+1] for i in range(len(lst)-1))", "test": "assert is_monotonic([1,2,2,3]) is True\nassert is_monotonic([3,2,1]) is True\nassert is_monotonic([1,3,2]) is False\nassert is_monotonic([]) is True\nassert is_monotonic([5]) is True"}
{"task_id": "HumanEval/100", "prompt": "Write a Python function `fib(n: int) -> int` that returns the nth Fibonacci number (0-indexed).", "canonical_solution": "def fib(n: int) -> int:\n    if n<0: raise ValueError('n must be non-negative')\n    if n==0: return 0\n    if n==1: return 1\n    a,b=0,1\n    for _ in range(2,n+1): a,b=b,a+b\n    return b", "test": "assert fib(0)==0\nassert fib(1)==1\nassert fib(5)==5\nassert fib(20)==6765"}